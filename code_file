{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "name": "BL.EN.U4AIE19039_ASSIGNMENT_1.ipynb",
      "provenance": [],
      "collapsed_sections": []
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "EpaUS6Hx5TqS"
      },
      "source": [
        "# ***Implementation Columnar Transposition Cipher***\n",
        "The columnar transposition cipher is a fairly simple, easy to implement cipher. It is a transposition cipher that follows a simple rule for mixing up the characters in the plaintext to form the ciphertext.\n",
        "\n",
        "Although weak on its own, it can be combined with other ciphers, such as a substitution cipher, the combination of which can be more difficult to break than either cipher on it's own."
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "Q1nhzUDG5iPh"
      },
      "source": [
        "Importing required packages"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "QctYp3xh5QpS"
      },
      "source": [
        "import math\n"
      ],
      "execution_count": 3,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "UzyoI5AA5tZi"
      },
      "source": [
        "Taking input from user"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 0
        },
        "id": "d_q2i3nG5xmZ",
        "outputId": "83a453c8-3929-431f-e96e-738d3b045757"
      },
      "source": [
        "key=input(\"Enter keyword text (Contains unique letters only): \").lower().replace(\" \", \"\")\n",
        "plain_text = input(\"Enter plain text (Letters only): \").lower().replace(\" \", \"\")\n",
        "\n",
        "len_key = len(key)\n",
        "len_plain = len(plain_text)\n",
        "row = int(math.ceil(len_plain / len_key))\n",
        "matrix = [ ['X']*len_key for i in range(row) ]\n",
        "\n",
        "print(matrix)"
      ],
      "execution_count": 12,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "Enter keyword text (Contains unique letters only): heo\n",
            "Enter plain text (Letters only): tarun\n",
            "[['X', 'X', 'X'], ['X', 'X', 'X']]\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "xls-NKVO6diN"
      },
      "source": [
        "# Encryption\n",
        "\n",
        "Our message exactly fit the rectangular array. If the message does not completely \n",
        "fill the array, nulls (i.e., padding) may be added to fill the array (this is the easier \n",
        "cipher to break) or not (this is harder to break because the columns do not all have \n",
        "the same length). In the latter case, the length of the keyword determines the \n",
        "number of columns, and the number of letters in the message determines the \n",
        "number of complete and partial rows"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 0
        },
        "id": "kb2CVEKp7mas",
        "outputId": "c58a74ea-81f6-40a0-d7bb-efa5e492e41d"
      },
      "source": [
        "t = 0\n",
        "for r in range(row):\n",
        "  for c,ch in enumerate(plain_text[t : t+ len_key]):\n",
        "    matrix[r][c] = ch\n",
        "  t += len_key\n",
        "\n",
        "# print(matrix)\n",
        "sort_order = sorted([(ch,i) for i,ch in enumerate(key)])  #to make alphabetically order of chars\n",
        "# print(sort_order)\n",
        "\n",
        "cipher_text = ''\n",
        "for ch,c in sort_order:\n",
        "  for r in range(row):\n",
        "    cipher_text += matrix[r][c]\n",
        "  \n",
        "print(\"Encryption\")\n",
        "print(\"Plain text is :\",plain_text)\n",
        "print(\"Cipher text is:\",cipher_text)"
      ],
      "execution_count": 13,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "Encryption\n",
            "Plain text is : tarun\n",
            "Cipher text is: anturX\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "nTY4MPM08KXh"
      },
      "source": [
        "# Decryption\n",
        "To decipher it, the recipient has to work out the column lengths by dividing the message length by the key length.\n",
        "Then, write the message out in columns again, then re-order the columns by reforming the key word."
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 0
        },
        "id": "lhDpYzPP8fCq",
        "outputId": "7f6619d8-7b2c-4b48-9d06-e878da309cba"
      },
      "source": [
        "matrix_new = [ ['X']*len_key for i in range(row) ]\n",
        "key_order = [ key.index(ch) for ch in sorted(list(key))]  #to make original key order when we know keyword\n",
        "# print(key_order)\n",
        "\n",
        "t = 0\n",
        "for c in key_order:\n",
        "  for r,ch in enumerate(cipher_text[t : t+ row]):\n",
        "    matrix_new[r][c] = ch\n",
        "  t += row\n",
        "# print(matrix_new) \n",
        "\n",
        "p_text = ''\n",
        "for r in range(row):\n",
        "  for c in range(len_key):\n",
        "    p_text += matrix_new[r][c] if matrix_new[r][c] != 'X' else ''\n",
        "\n",
        "print(\"Decryption\")\n",
        "print(\"Cipher text is:\",cipher_text)\n",
        "print(\"Plain text is :\",p_text)"
      ],
      "execution_count": 14,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "Decryption\n",
            "Cipher text is: anturX\n",
            "Plain text is : tarun\n"
          ],
          "name": "stdout"
        }
      ]
    }
  ]
}
